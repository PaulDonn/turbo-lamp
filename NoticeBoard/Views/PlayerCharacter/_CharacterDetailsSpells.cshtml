@model NoticeBoard.Models.PlayerCharacters.PlayerCharacterModel
@using System.Text.RegularExpressions;

<div>
    <div class="row" style="padding-bottom:10px">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-4">
                            <div class="col-12">Spellcasting Ability</div>
                            <label class="col-12"><strong>@Model.PlayerClass.SpellcastingAbility.Name</strong></label>
                        </div>
                        <div class="col-4">
                            <div class="col-12">Spell Save DC</div>
                            <label class="col-12"><strong>@Model.SpellSaveDC</strong></label>
                        </div>
                        <div class="col-4">
                            <div class="col-12">Spell Attack Bonus</div>
                            <label class="col-12"><strong>@Model.SpellAttackBonus</strong></label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*Cantrips and Spells*@
    @for (int i = 0; i <= 9; i++)
    {
        if (i == 0 || Model.SpellLevels.Single(n => n.SpellLevel == i)?.SlotsMaximum > 0)
        {
            <div class="row">
                <div class="col-12" style="padding-bottom:10px">
                    <div class="card">
                        <div class="card-header collapsed" data-toggle="collapse" href="#spellLevel@(i)" role="button" aria-expanded="true" aria-controls="spellLevel@(i)">
                            <span class="float-left">
                                <i class="accord-arrow"></i>
                            </span>
                            <div class="row">
                                <div class="col-2">
                                    @if (i == 0)
                                    {
                                        <div><strong>Cantrips</strong></div>
                                    }
                                    else
                                    {
                                        <strong>Level @i</strong>
                                    }
                                </div>
                                <div class="col-2">
                                    @if (i == 0)
                                    {
                                        <strong>Spell Slots: ∞</strong>
                                    }
                                    else
                                    {
                                        <strong>Spell Slots: @Model.SpellLevels.Single(n => n.SpellLevel == i)?.SlotsMaximum</strong>
                                    }
                                </div>
                                <div class="col-8">
                                    @if (i == 0)
                                    {
                                        <strong>Slots Remaining: ∞</strong>
                                    }
                                    else
                                    {
                                        <strong>Slots Remaining: @Model.SpellLevels.Single(n => n.SpellLevel == i)?.SlotsCurrent</strong>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="card-body collapse" id="spellLevel@(i)">
                            <table class="table table-bordered table-striped">
                                <thead>
                                    <tr>
                                        @if (i > 0
                                           && (Model.PlayerClass.Id == 3
                                           || Model.PlayerClass.Id == 4
                                           || Model.PlayerClass.Id == 7
                                           || Model.PlayerClass.Id == 12))
                                        {
                                            <th width="5%">Prepared</th>
                                            <th width="20%">Name</th>
                                        }
                                        else
                                        {
                                            <th width="25%">Name</th>
                                        }
                                        <th width="15%">School</th>
                                        <th width="15%">Casting Time</th>
                                        <th width="15%">Range</th>
                                        <th width="15%">Components</th>
                                        <th width="15%">Duration</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pcSpell in Model.Spells.Where(n => n.Spell.SpellLevel == i))
                                    {
                                        <tr>
                                            @if (i > 0
                                           && (Model.PlayerClass.Id == 12))
                                            {
                                                <td class="text-center">
                                                    <input type="radio" disabled @if (pcSpell.IsPrepared) { @: checked
                                                           } />
                                                </td>
                                            }
                                            <td data-toggle="tooltip" data-placement="left" title="@Regex.Replace(pcSpell.Spell.ShortDescription, @"<[^>]*>", String.Empty)">@pcSpell.Spell.Name</td>
                                            <td>@pcSpell.Spell.SpellSchool</td>
                                            <td>
                                                @pcSpell.Spell.CastingTime@if (pcSpell.Spell.IsRitual)
                                                {
                                                    @: (Ritual)
                                                }
                                            </td>
                                            <td>@pcSpell.Spell.Range</td>
                                            <td>
                                                @if (pcSpell.Spell.RequiresVerbal)
                                                {
                                                    @:<span data-toggle="tooltip" data-placement="top" title="This spell requires a verbal component">V </span>
                                                }
                                                @if (pcSpell.Spell.RequiresVerbal)
                                                {
                                                    @:<span data-toggle="tooltip" data-placement="top" title="This spell requires a somatic component">S </span>
                                                }
                                                @if (pcSpell.Spell.RequiresMaterial)
                                                {
                                                    @:<span data-toggle="tooltip" data-placement="top" title="This spell requires a material component">M </span>
                                                }
                                                @if (!string.IsNullOrEmpty(pcSpell.Spell.MaterialDescription))
                                                {
                                                    @:(@pcSpell.Spell.MaterialDescription)
                                                }
                                            </td>
                                            <td>
                                                @if (pcSpell.Spell.RequiresConcentration)
                                                {
                                                    @:Concentration:
                                                }@pcSpell.Spell.Duration
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>
